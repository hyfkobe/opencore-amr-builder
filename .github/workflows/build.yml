name: Build opencore-amr from tarball

# on:
#   workflow_dispatch:
#   push:
#     branches: [ main ]

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: false
        default: ''

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y autoconf automake libtool build-essential

      - name: Extract and build
        run: |
          tar xf opencore-amr-0.1.6.tar.gz
          cd opencore-amr-0.1.6
          ./configure --enable-static --disable-shared
          make -j$(nproc)
          cd ..
          mkdir -p artifacts/linux
          cp opencore-amr-0.1.6/amrnb/.libs/libopencore-amrnb.a artifacts/linux/
          cp opencore-amr-0.1.6/amrnb/interf_dec.h artifacts/linux/
          cp opencore-amr-0.1.6/amrnb/interf_enc.h artifacts/linux/

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: artifacts/linux/

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - uses: msys2/setup-msys2@v2
        with:
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain

      - name: Extract and build
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm autoconf automake libtool
          tar xf opencore-amr-0.1.6.tar.gz
          cd opencore-amr-0.1.6
          ./configure --host=mingw32 --enable-static --disable-shared
          make -j$(nproc)
          cd ..
          mkdir -p artifacts/windows
          cp opencore-amr-0.1.6/amrnb/.libs/libopencore-amrnb.a artifacts/windows/
          cp opencore-amr-0.1.6/amrnb/interf_dec.h artifacts/windows/
          cp opencore-amr-0.1.6/amrnb/interf_enc.h artifacts/windows/

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: artifacts/windows/

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: brew install autoconf automake libtool

      - name: Build for x86_64
        run: |
          cp opencore-amr-0.1.6.tar.gz opencore-amr-x86_64.tar.gz
          tar xf opencore-amr-x86_64.tar.gz
          mv opencore-amr-0.1.6 opencore-amr-x86_64
          cd opencore-amr-x86_64
          ./configure --build=x86_64-apple-darwin --host=x86_64-apple-darwin \
                      CC="clang" CFLAGS="-arch x86_64" LDFLAGS="-arch x86_64" \
                      --enable-static --disable-shared
          make -j$(sysctl -n hw.logicalcpu)

      - name: Build for arm64
        run: |
          cp opencore-amr-0.1.6.tar.gz opencore-amr-arm64.tar.gz
          tar xf opencore-amr-arm64.tar.gz
          mv opencore-amr-0.1.6 opencore-amr-arm64
          cd opencore-amr-arm64
          ./configure --build=arm-apple-darwin --host=arm-apple-darwin \
                      CC="clang" CFLAGS="-arch arm64" LDFLAGS="-arch arm64" \
                      --enable-static --disable-shared
          make -j$(sysctl -n hw.logicalcpu)

      - name: Create Universal Binary
        run: |
          mkdir -p artifacts/macos
          lipo -create \
            opencore-amr-x86_64/amrnb/.libs/libopencore-amrnb.a \
            opencore-amr-arm64/amrnb/.libs/libopencore-amrnb.a \
            -output artifacts/macos/libopencore-amrnb.a
          cp opencore-amr-x86_64/amrnb/interf_dec.h artifacts/macos/
          cp opencore-amr-x86_64/amrnb/interf_enc.h artifacts/macos/
          lipo -info artifacts/macos/libopencore-amrnb.a
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: artifacts/macos/

  upload:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: artifacts/linux

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: artifacts/windows

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts
          path: artifacts/macos

      - name: Upload all artifacts as release asset
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*  # Upload everything
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
